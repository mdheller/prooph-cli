#!/usr/bin/env php
<?php
/**
 * prooph (http://getprooph.org/)
 *
 * @see       https://github.com/proophsoftware/prooph-cli for the canonical source repository
 * @copyright Copyright (c) 2016 prooph software GmbH (http://prooph-software.com/)
 * @license   https://github.com/proophsoftware/prooph-cli/blob/master/LICENSE.md New BSD License
 */

if (version_compare('5.5.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        'This version of prooph-cli requires PHP 5.5; using the latest version of PHP is highly recommended.' . PHP_EOL
    );

    die(1);
}

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

foreach (
    [
        __DIR__ . '/../../../autoload.php',
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ] as $file
) {
    if (file_exists($file)) {
        define('PROOPHCLI_COMPOSER_INSTALL', $file);

        break;
    }
}

unset($file);

if (!defined('PROOPHCLI_COMPOSER_INSTALL')) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );

    die(1);
}

require PROOPHCLI_COMPOSER_INSTALL;

use Symfony\Component\Console\Application;
use Prooph\Cli\Console\Command;
use Prooph\Cli\Code\Generator;

$containerFile = 'config' . DIRECTORY_SEPARATOR . 'container.php';

$container = null;

if (file_exists($containerFile)) {
    $container = require $containerFile;
}

$classInfo = null;

if ($container instanceof \Interop\Container\ContainerInterface
    && $container->has(\Prooph\Cli\Console\Helper\ClassInfo::class)
) {
    $classInfo = $container->get(\Prooph\Cli\Console\Helper\ClassInfo::class);

    if (!$classInfo instanceof \Prooph\Cli\Console\Helper\ClassInfo) {
        throw new \Prooph\Cli\Exception\RuntimeException(
            'Wrong instance registered. Class info must be an instance of \Prooph\Cli\Console\Helper\ClassInfo'
        );
    }
}

if (null === $classInfo) {
    $classInfo = new \Prooph\Cli\Console\Helper\Psr4Info(
        getenv('PROOPHCLI_SOURCE_FOLDER') ?: getcwd() . DIRECTORY_SEPARATOR . 'src',
        getenv('PROOPHCLI_PACKAGE_PREFIX') ?: '',
        getenv('PROOPHCLI_FILE_DOC_BLOCk') ?: ''
    );
}

$description = <<<PROOPH
prooph command line interface
=============================

This tool checks if a container-interop instance is returned from file config/container.php. You can configure the
class info metadata by registering an instance with name \Prooph\Cli\Console\Helper\ClassInfo like 
\Prooph\Cli\Console\Helper\Psr4Info to the container.

Another option is to use environment variables to configure your class metadata:

env variables:
- PROOPHCLI_SOURCE_FOLDER: path to src folder, default current working dir + 'src'
- PROOPHCLI_PACKAGE_PREFIX: namespace of package, default ''
- PROOPHCLI_FILE_DOC_BLOCk: file doc block, default ''
PROOPH;


$application = new Application($description);

// environment variables can be used to configure the class info, useful for Docker or bash scripts
$helperSet = $application->getHelperSet();

$helperSet->set($classInfo);

$aggregate = new Generator\Aggregate();
$command = new Generator\Command();
$commandHandler = new Generator\CommandHandler();
$commandHandlerFactory = new Generator\CommandHandlerFactory();
$event = new Generator\Event();

$application->addCommands(
    [
        new Command\GenerateAll(),
        new Command\GenerateCommand($command, $commandHandler, $commandHandlerFactory),
        new Command\GenerateAll(),
        new Command\GenerateEvent($event),
        new Command\GenerateAggregate($aggregate)
    ]
);

$application->run();
